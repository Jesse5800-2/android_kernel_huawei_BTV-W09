name: Build BTV-W09 Kernel with KernelSU

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  KERNEL_VERSION: "4.4.130"
  KERNELSU_VERSION: "v0.9.4"
  DEFCONFIG: "merge_hi3650_defconfig"

jobs:
  build_kernel:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential bc kmod cpio flex \
          libncurses5-dev libelf-dev libssl-dev \
          bison python2.7 lz4 lzma-dev git

    - name: Setup Python 2.7
      run: |
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
        sudo update-alternatives --set python /usr/bin/python2.7

    - name: Setup AArch64 toolchain
      run: |
        mkdir toolchain
        wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/5d457b6d3d2c1b1b3a3e8e9d6a0d9c6b7a8f7e6d5/android-9.0.0_r55.tar.gz -O toolchain.tar.gz
        tar -xzf toolchain.tar.gz -C toolchain
        rm toolchain.tar.gz

    - name: Clone KernelSU
      run: |
        git clone --depth=1 https://github.com/tiann/KernelSU -b $KERNELSU_VERSION

    - name: Apply KernelSU patches
      run: |
        cd KernelSU
        git apply kernel_patches/linux-4.4/kernelsu.patch
        cd ..
        grep "CONFIG_KPROBES=y" arch/arm64/configs/$DEFCONFIG || echo "注意：CONFIG_KPROBES未在defconfig中启用"

    - name: Configure kernel
      run: |
        export ARCH=arm64
        export CROSS_COMPILE=$(pwd)/toolchain/bin/aarch64-linux-android-
        export CFLAGS_MODULE="-fno-pic"
        
        make clean
        make mrproper
        make O=out $DEFCONFIG
        
        echo "CONFIG_KPROBES=y" >> out/.config
        echo "CONFIG_HAVE_KPROBES=y" >> out/.config
        echo "CONFIG_KPROBE_EVENTS=y" >> out/.config
        echo "CONFIG_OVERLAY_FS=y" >> out/.config
        echo "CONFIG_KSU=y" >> out/.config
        echo "CONFIG_MODULES=y" >> out/.config
        echo "CONFIG_MODULE_UNLOAD=y" >> out/.config
        echo "CONFIG_STAGING=y" >> out/.config
        echo "CONFIG_ASHMEM=y" >> out/.config
        echo "CONFIG_ANDROID_LOW_MEMORY_KILLER=y" >> out/.config
        
        make O=out oldconfig

    - name: Build kernel
      run: |
        export ARCH=arm64
        export CROSS_COMPILE=$(pwd)/toolchain/bin/aarch64-linux-android-
        export CFLAGS_MODULE="-fno-pic"
        make -j$(($(nproc)*2)) O=out
        nm out/vmlinux | grep '__ksu_' && echo "KernelSU符号存在" || echo "警告：未找到KernelSU符号"

    - name: Package artifacts
      run: |
        mkdir -p artifacts
        cp out/arch/arm64/boot/Image.gz-dtb artifacts/kernel_with_kernelsu.img
        cp out/.config artifacts/final_config
        cp out/vmlinux artifacts/
        
        echo "===== 构建信息 =====" > artifacts/build_report.txt
        echo "设备: Huawei BTV-W09 (hi3650)" >> artifacts/build_report.txt
        echo "内核版本: $KERNEL_VERSION" >> artifacts/build_report.txt
        echo "构建时间: $(TZ='Asia/Shanghai' date)" >> artifacts/build_report.txt
        echo "Git提交: $(git log -1 --pretty='%h - %s')" >> artifacts/build_report.txt
        echo "KernelSU版本: $KERNELSU_VERSION" >> artifacts/build_report.txt
        echo "Defconfig: $DEFCONFIG" >> artifacts/build_report.txt
        echo "" >> artifacts/build_report.txt
        echo "===== KernelSU配置状态 =====" >> artifacts/build_report.txt
        grep -E 'CONFIG_KSU|CONFIG_KPROBES' out/.config >> artifacts/build_report.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ github.run_id }}-${{ github.sha }}
        path: artifacts/
        retention-days: 7
        compression-level: 9  # v4新增的压缩级别选项
        overwrite: true       # v4新增的覆盖选项
